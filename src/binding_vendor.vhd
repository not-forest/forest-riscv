-- ============================================================
-- File Name: binding_vendor.vhd
-- Desc: Additional bindings to the FPGA board. This module separates the overall
--      design from vendor-specific configuration/structures.
-- Warn: Vendor specific content ahead. This file is compatible with Quartus Prime software.
-- ============================================================
-- MIT License
--
-- Copyright (c) 2024, notforest
--
-- Permission is hereby granted, free of charge, to any person obtaining a copy
-- of this software and associated documentation files (the "Software"), to deal in the Software without restriction, 
-- including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell 
-- copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following 
-- conditions:
--
-- The above copyright notice and this permission notice shall be included in all copies or substantial portions of the 
-- Software.
--
-- THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE 
-- WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS 
-- OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR 
-- OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

library friscv;
library ieee;
library jtag_debug_sys;

use jtag_debug_sys.all;
use ieee.std_logic_1164.all;
use friscv.debug.all;

use friscv.cpu;
use friscv.pll;

entity binding_vendor is
    port (
        pLED        : out std_logic_vector(4 downto 0); -- 4 Onboard leds.
        pSW         : in std_logic_vector(4 downto 0);  -- 4 Onboard switches.

        pFPGA_CLK   : in std_logic;                     -- FPGA external 50Mhz clock.
        pRESET      : in std_logic                      -- Reset button (Active low).
         );
end entity;

architecture vendor of binding_vendor is
    signal w_pll_clock      : std_logic := '1';                 -- Wires clock output from the PLL element.
    signal w_dbg            : t_DebugInputRecord;               -- Wires JTAG debugger and internal debugger controller.
    signal w_dbgo           : std_logic_vector(31 downto 0);    -- Chip debugger output.

    signal r_clk_counter    : integer range 0 to 3 := 0;        -- Shows which instruction cycle is being currently performed.
    signal w_clk            : std_logic := '1';                 -- Clock reference (exact clock used inside the CPU).

    -- JTAG debbufer component is generated by Platform Designer (QSYS). --
    component jtag_debug_sys is
		port (
			dbg_clk_clk         : in  std_logic                     := 'X';             -- clk
			dbg_cmd_bus_export  : out std_logic_vector(7 downto 0);                     -- export
			dbg_data_bus_export : in  std_logic_vector(31 downto 0) := (others => 'X'); -- export
			dbg_reset_reset_n   : in  std_logic                     := 'X';             -- reset_n
			dbg_arg_bus_export  : out std_logic_vector(31 downto 0)                     -- export
		);
	end component jtag_debug_sys;
begin
    -- Singular CPU instance.
    CPU_Inst : entity cpu
    port map(
        i_dbg => w_dbg,
        o_dbg => w_dbgo,
        o_clk_ref => w_clk,

        i_clk => pFPGA_CLK,
        na_clr => not pRESET
    );

    PLL_Inst : entity pll
    port map(
        i_clk0 => pFPGA_CLK,
        o_clk0 => w_pll_clock,
        o_clk1 => open,
        o_clk2 => open
    );

    -- JTAG debugger instance. Allows for communication with System Console via Tcl scripts.
    JTAG_DEBUG_SYS_Inst : jtag_debug_sys
	port map (
		dbg_clk_clk         => w_pll_clock,                         --      dbg_clk.clk
		to_cmd(dbg_cmd_bus_export)  => w_dbg.cmd,                   --  dbg_cmd_bus.export
		dbg_data_bus_export => w_dbgo,                              -- dbg_data_bus.export
		dbg_reset_reset_n   => pRESET,                              --    dbg_reset.reset_n
		dbg_arg_bus_export  => w_dbg.data                           --  dbg_arg_bus.export
	);

    -- Not related to actuall CPU performance.
    process (all) begin
        if falling_edge(w_clk) then
            r_clk_counter <= r_clk_counter + 1;
        end if;
    end process;

    -- Lights the next led on each clock tick.
    g_LEDS : for i in 0 to 3 generate
        pLED(i) <= '0' when i = r_clk_counter else '1';
    end generate;
end architecture;
